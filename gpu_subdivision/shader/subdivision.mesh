#version 450
#extension GL_EXT_mesh_shader : require

layout(push_constant) uniform PushConstants {
    mat4 model;
    mat4 view;
    mat4 proj;
    int subdivision;
} pushConstants;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 4, max_primitives = 2) out;

layout(binding = 0) buffer Vertices{vec4 v[];} vertices;
layout(binding = 1) buffer Indices{uint i[];} indices;

layout(location = 0) out VertexOutput
{
    vec4 color;
} vertexOutput[];

void main()
{
    uint primID = gl_GlobalInvocationID.x;
    uint subPrimID = gl_GlobalInvocationID.y;

    uint i0 = indices.i[4 * primID + 0]; 
    uint i1 = indices.i[4 * primID + 1]; 
    uint i2 = indices.i[4 * primID + 2];
    uint i3 = indices.i[4 * primID + 3];
    vec4 vps[] = {
        vec4(vertices.v[i0]),
        vec4(vertices.v[i1]),
        vec4(vertices.v[i2]),
        vec4(vertices.v[i3]),
    }; 
    
    SetMeshOutputsEXT(4, 2);
    mat4 mvp = pushConstants.proj * pushConstants.view * pushConstants.model;
    if(pushConstants.subdivision == 0){
        gl_MeshVerticesEXT[0].gl_Position = mvp * vps[0];
        gl_MeshVerticesEXT[1].gl_Position = mvp * vps[1];
        gl_MeshVerticesEXT[2].gl_Position = mvp * vps[2];
        gl_MeshVerticesEXT[3].gl_Position = mvp * vps[3];
    }else{
        // face point
        vec4 fp = (vps[0] + vps[1] + vps[2] + vps[3]) / 4.0;

        // edge points
        vec4 ep0 = (vps[(subPrimID + 0) % 4] + vps[(subPrimID + 1) % 4]) / 2.0;
        vec4 ep1 = (vps[(subPrimID + 3) % 4] + vps[(subPrimID + 4) % 4]) / 2.0;

        // move original point
        vec4 ep = (ep0 + ep1) / 2.0;
        vec4 vp = (ep + vps[subPrimID]) / 2.0;

        // new points
        vec4 nps[] = { vp, ep0, fp, ep1, };
        gl_MeshVerticesEXT[0].gl_Position = mvp * nps[0];
        gl_MeshVerticesEXT[1].gl_Position = mvp * nps[1];
        gl_MeshVerticesEXT[2].gl_Position = mvp * nps[2];
        gl_MeshVerticesEXT[3].gl_Position = mvp * nps[3];
    }
    vertexOutput[0].color = vec4(1.0, 0.0, 0.0, 1.0);
    vertexOutput[1].color = vec4(0.0, 1.0, 0.0, 1.0);
    vertexOutput[2].color = vec4(0.0, 0.0, 1.0, 1.0);
    vertexOutput[3].color = vec4(0.0, 1.0, 0.0, 1.0);
    gl_PrimitiveTriangleIndicesEXT[2 * gl_LocalInvocationIndex + 0] =  uvec3(0, 1, 2);
    gl_PrimitiveTriangleIndicesEXT[2 * gl_LocalInvocationIndex + 1] =  uvec3(2, 3, 0);
}
