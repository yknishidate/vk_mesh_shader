#version 450
#extension GL_EXT_mesh_shader : require

layout(push_constant) uniform PushConstants {
    mat4 model;
    mat4 view;
    mat4 proj;
} pushConstants;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(triangles, max_vertices = 4, max_primitives = 2) out;

struct Vertex
{
    vec3 pos;
    vec3 normal;
    vec2 texCoord;
};

layout(binding = 0) buffer Vertices{float v[];} vertices;
layout(binding = 1) buffer Indices{uint i[];} indices;

Vertex unpackVertex(uint index)
{
    uint stride = 8; // sizeof(Vertex)
    uint offset = index * stride;
    Vertex v;
    v.pos = vec3(vertices.v[offset +  0], vertices.v[offset +  1], vertices.v[offset + 2]);
    return v;
}

layout(location = 0) out VertexOutput
{
    vec4 color;
} vertexOutput[];

void main()
{
    uint primitiveID = gl_GlobalInvocationID.x;
    uint subPrimtiveID = gl_GlobalInvocationID.y;
    uint is[] = {
        indices.i[3 * primitiveID + 0], 
        indices.i[3 * primitiveID + 1], 
        indices.i[3 * primitiveID + 2]
    };

    vec3 vs[] = {
        unpackVertex(is[0]).pos,
        unpackVertex(is[1]).pos,
        unpackVertex(is[2]).pos
    }; 

    // TODO: move to task shader
    // face point
    vec3 f = (vs[0] + vs[1] + vs[2]) / 3.0;

    // TODO: move to task shader
    // edge points
    vec3 es[] = {
        (vs[0] + vs[1]) / 2.0,
        (vs[1] + vs[2]) / 2.0,
        (vs[2] + vs[0]) / 2.0
    };

    vec3 newVertices[] = {
        vs[subPrimtiveID],
        es[subPrimtiveID],
        f,
        es[(subPrimtiveID + 2) % 3],
    };

    SetMeshOutputsEXT(4, 2);
    mat4 mvp = pushConstants.proj * pushConstants.view * pushConstants.model;
    gl_MeshVerticesEXT[0].gl_Position = mvp * vec4(newVertices[0], 1);
    gl_MeshVerticesEXT[1].gl_Position = mvp * vec4(newVertices[1], 1);
    gl_MeshVerticesEXT[2].gl_Position = mvp * vec4(newVertices[2], 1);
    gl_MeshVerticesEXT[3].gl_Position = mvp * vec4(newVertices[3], 1);
    vertexOutput[0].color = vec4(1.0, 0.0, 0.0, 1.0);
    vertexOutput[1].color = vec4(0.0, 1.0, 0.0, 1.0);
    vertexOutput[2].color = vec4(0.0, 0.0, 1.0, 1.0);
    vertexOutput[3].color = vec4(0.0, 1.0, 0.0, 1.0);
    gl_PrimitiveTriangleIndicesEXT[2 * gl_LocalInvocationIndex + 0] =  uvec3(0, 1, 2);
    gl_PrimitiveTriangleIndicesEXT[2 * gl_LocalInvocationIndex + 1] =  uvec3(2, 3, 0);
}
